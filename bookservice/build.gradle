group 'sample'
version '0.0.1-SNAPSHOT'

buildscript {
    ext {
        kotlinVersion = "1.2.21"
        exposedVersion = "0.10.1"
        springBootVersion = "2.0.0.RELEASE"
        grpcVersion = '1.9.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath('com.google.protobuf:protobuf-gradle-plugin:+')
        classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:+')
    }
}

repositories {
    maven {
        url("https://dl.bintray.com/kotlin/exposed/")
    }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    mavenCentral()
    jcenter()
    mavenLocal()
}

apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "org.springframework.boot"
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.palantir.docker'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets.main.java.srcDirs = ['src/main/java', 'src/main/grpc']

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dependencies {
    // springboot
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-jdbc")

    // kotlin
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlin:kotlin-reflect")

    // exposed
    compile("org.jetbrains.exposed:exposed:${exposedVersion}")
    compile("org.jetbrains.exposed:spring-transaction:${exposedVersion}")

    // jackson
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.3")

    // h2
    runtime("com.h2database:h2:+")
    // postgresql
    runtime("postgresql:postgresql:+")

    // grpc
    compile('org.lognet:grpc-spring-boot-starter:+')
    compile("io.grpc:grpc-core:${grpcVersion}")
    compile("io.grpc:grpc-services:${grpcVersion}")
    compile("io.grpc:grpc-netty:${grpcVersion}")
    compile("io.grpc:grpc-protobuf:${grpcVersion}")
    compile("io.grpc:grpc-stub:${grpcVersion}")

    testCompile("junit:junit:4.12")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

// grpc
protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                // To generate deprecated interfaces and static bindService method,
                // turn the enable_deprecated option to true below:
                option 'enable_deprecated=false'
            }
        }
    }
    generatedFilesBaseDir = "$projectDir/src/"
}

jar {
    baseName = "${rootProject.name}"
    version =  "${version}"
}

docker {
    name "${project.group}/${jar.baseName}:${version}"
    files jar.archivePath
    buildArgs(['JAR_FILE': "${jar.archiveName}"])
}
